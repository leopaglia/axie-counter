{"version":3,"sources":["appContext.js","components/CardsCounter.jsx","components/CardsTable.jsx","components/EnergyCounter.jsx","components/ResetGame.jsx","components/RoundCounter.jsx","app/App.jsx","serviceWorkerRegistration.js","index.jsx"],"names":["AppContext","createContext","useAppContext","useContext","INITIAL_USAGE","INITIAL_AXIES_ALIVE","Provider","children","useState","energyCount","setEnergyCount","cardCount","setCardCount","amountToDiscard","setAmountToDiscard","useEffect","usedCards","setUsedCards","round","setRound","axiesAlive","setAxiesAlive","value","increaseEnergyCount","decreaseEnergyCount","toggleCard","cardIndex","repeatIndex","usedCardsObj","cardToModifyObj","Object","values","endRound","toggleAxieAlive","idx","axiesAliveObj","resetAll","MAX_ENERGY","CardsCounter","className","height","src","alt","CardsTable","iconsMap","map","row","rowIdx","card","cellIdx","Math","floor","onClick","rowSpan","width","colSpan","EnergyCounter","ResetGame","RoundCounter","launchedAsApp","window","matchMedia","matches","navigator","standalone","App","resizeTo","showInstallButton","setShowInstallButton","showOpenInAppButton","setShowOpenInAppButton","getInstalledRelatedApps","then","installed","console","log","length","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.6c376cba.chunk.js","sourcesContent":["import { createContext, useContext, useEffect, useState } from 'react'\r\n\r\nconst AppContext = createContext()\r\nexport const useAppContext = () => useContext(AppContext)\r\n\r\nconst INITIAL_ENERGY = 3\r\nconst ENERGY_PER_TURN = 2\r\nconst MIN_ENERGY = 0\r\nconst MAX_ENERGY = 10\r\n\r\nconst INITIAL_CARDS = 6\r\nconst CARDS_PER_DRAW = 3\r\nconst MAX_CARDS = 12\r\n\r\nconst INITIAL_USAGE = [\r\n  [false, false],\r\n  [false, false],\r\n  [false, false],\r\n  [false, false],\r\n\r\n  [false, false],\r\n  [false, false],\r\n  [false, false],\r\n  [false, false],\r\n\r\n  [false, false],\r\n  [false, false],\r\n  [false, false],\r\n  [false, false],\r\n]\r\n\r\nconst INITIAL_AXIES_ALIVE = [true, true, true]\r\n\r\nexport const Provider = ({ children }) => {\r\n  const [energyCount, setEnergyCount] = useState(INITIAL_ENERGY)\r\n  const increaseEnergyCount = () =>\r\n    setEnergyCount(energyCount !== MAX_ENERGY ? energyCount + 1 : MAX_ENERGY)\r\n  const decreaseEnergyCount = () =>\r\n    setEnergyCount(energyCount !== MIN_ENERGY ? energyCount - 1 : MIN_ENERGY)\r\n\r\n  const [cardCount, setCardCount] = useState(INITIAL_CARDS)\r\n\r\n  const [amountToDiscard, setAmountToDiscard] = useState(0)\r\n  useEffect(() => {\r\n    setAmountToDiscard(\r\n      cardCount + CARDS_PER_DRAW > MAX_CARDS\r\n        ? cardCount + CARDS_PER_DRAW - MAX_CARDS\r\n        : 0\r\n    )\r\n  }, [cardCount])\r\n\r\n  const [usedCards, setUsedCards] = useState(INITIAL_USAGE)\r\n  const toggleCard = (cardIndex, repeatIndex) => {\r\n    if (cardCount === 0) return\r\n\r\n    const usedCardsObj = { ...usedCards }\r\n    const cardToModifyObj = { ...usedCardsObj[cardIndex] }\r\n\r\n    setUsedCards(\r\n      Object.values({\r\n        ...usedCardsObj,\r\n        [cardIndex]: Object.values({\r\n          ...cardToModifyObj,\r\n          [repeatIndex]: !cardToModifyObj[repeatIndex],\r\n        }),\r\n      })\r\n    )\r\n\r\n    setCardCount(\r\n      usedCards[cardIndex][repeatIndex] ? cardCount + 1 : cardCount - 1\r\n    )\r\n  }\r\n\r\n  const [round, setRound] = useState(1)\r\n\r\n  const [axiesAlive, setAxiesAlive] = useState(INITIAL_AXIES_ALIVE)\r\n  const toggleAxieAlive = (idx) => {\r\n    const axiesAliveObj = { ...axiesAlive }\r\n\r\n    setAxiesAlive(\r\n      Object.values({\r\n        ...axiesAliveObj,\r\n        [idx]: !axiesAlive[idx],\r\n      })\r\n    )\r\n  }\r\n\r\n  const endRound = () => {\r\n    setCardCount(\r\n      cardCount + CARDS_PER_DRAW < MAX_CARDS\r\n        ? cardCount + CARDS_PER_DRAW\r\n        : MAX_CARDS\r\n    )\r\n\r\n    setEnergyCount(\r\n      energyCount + ENERGY_PER_TURN < MAX_ENERGY\r\n        ? energyCount + ENERGY_PER_TURN\r\n        : MAX_ENERGY\r\n    )\r\n\r\n    setRound(round + 1)\r\n  }\r\n\r\n  const resetAll = () => {\r\n    setEnergyCount(INITIAL_ENERGY)\r\n    setCardCount(INITIAL_CARDS)\r\n    setAmountToDiscard(0)\r\n    setUsedCards(INITIAL_USAGE)\r\n    setRound(1)\r\n    setAxiesAlive(INITIAL_AXIES_ALIVE)\r\n  }\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        energyCount,\r\n        increaseEnergyCount,\r\n        decreaseEnergyCount,\r\n        cardCount,\r\n        amountToDiscard,\r\n        usedCards,\r\n        toggleCard,\r\n        round,\r\n        endRound,\r\n        axiesAlive,\r\n        toggleAxieAlive,\r\n        resetAll,\r\n        MAX_ENERGY,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  )\r\n}\r\n","import { useAppContext } from '../appContext'\r\nimport './CardsCounter.css'\r\n\r\nconst CardsCounter = () => {\r\n  const { cardCount, amountToDiscard } = useAppContext()\r\n\r\n  return (\r\n    <div className=\"cards-counter\">\r\n      <img height=\"60\" src=\"img/cards.png\" alt=\"card count\" />\r\n      <h3>x{cardCount}</h3>\r\n      {!!amountToDiscard && (\r\n        <small>discards {amountToDiscard} next round</small>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardsCounter\r\n","import { Fragment } from 'react'\r\nimport { useAppContext } from '../appContext'\r\nimport './CardsTable.css'\r\n\r\nconst CardsTable = () => {\r\n  const { usedCards, toggleCard, axiesAlive, toggleAxieAlive } = useAppContext()\r\n\r\n  const iconsMap = {\r\n    0: { src: 'img/teeth.png', alt: 'mouth' },\r\n    1: { src: 'img/horns.png', alt: 'horns' },\r\n    2: { src: 'img/back.png', alt: 'back' },\r\n    3: { src: 'img/tail.png', alt: 'tail' },\r\n  }\r\n\r\n  return (\r\n    <table className=\"cards-table\">\r\n      <thead>\r\n        <tr>\r\n          <th></th>\r\n          <th>#1</th>\r\n          <th>#2</th>\r\n          <th></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {usedCards.map((row, rowIdx) => (\r\n          <Fragment key={`row-${rowIdx}`}>\r\n            <tr>\r\n              <td className=\"icon\">\r\n                <img\r\n                  src={iconsMap[rowIdx % 4].src}\r\n                  alt={iconsMap[rowIdx % 4].alt}\r\n                />\r\n              </td>\r\n              {row.map((card, cellIdx) => (\r\n                <td\r\n                  key={`cell-${rowIdx}-${cellIdx}`}\r\n                  className={\r\n                    axiesAlive[Math.floor(rowIdx / 4)]\r\n                      ? card\r\n                        ? 'used'\r\n                        : 'potential-draw'\r\n                      : 'disabled'\r\n                  }\r\n                  onClick={() =>\r\n                    axiesAlive[Math.floor(rowIdx / 4)] &&\r\n                    toggleCard(rowIdx, cellIdx)\r\n                  }\r\n                >\r\n                  {card ? 'X' : ''}\r\n                </td>\r\n              ))}\r\n              {rowIdx % 4 === 0 ? (\r\n                <td\r\n                  className=\"kill-btn\"\r\n                  rowSpan={4}\r\n                  onClick={() => toggleAxieAlive(rowIdx / 4)}\r\n                >\r\n                  {axiesAlive[Math.floor(rowIdx / 4)] ? (\r\n                    <img\r\n                      height={40}\r\n                      width={50}\r\n                      src=\"img/alive.png\"\r\n                      alt=\"dead\"\r\n                    />\r\n                  ) : (\r\n                    <img height={40} src=\"img/dead.png\" alt=\"dead\" />\r\n                  )}\r\n                </td>\r\n              ) : null}\r\n            </tr>\r\n            {rowIdx % 4 === 3 && rowIdx < 11 && (\r\n              <tr key={`divider-${Math.floor(rowIdx / 4)}`}>\r\n                <td className=\"divider\" colSpan={4}>\r\n                  <hr />\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </Fragment>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default CardsTable\r\n","import { useAppContext } from '../appContext'\r\nimport './EnergyCounter.css'\r\n\r\nconst EnergyCounter = () => {\r\n  const { energyCount, increaseEnergyCount, decreaseEnergyCount, MAX_ENERGY } =\r\n    useAppContext()\r\n\r\n  return (\r\n    <div className=\"energy-counter\">\r\n      <img height=\"60\" src=\"img/energy.png\" alt=\"energy\" />\r\n\r\n      <h3>\r\n        {energyCount} / {MAX_ENERGY}\r\n      </h3>\r\n\r\n      <div>\r\n        <button onClick={decreaseEnergyCount}>-</button>\r\n        <button onClick={increaseEnergyCount}>+</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EnergyCounter\r\n","import { useAppContext } from '../appContext'\r\n\r\nconst ResetGame = () => {\r\n  const { resetAll } = useAppContext()\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={resetAll}>New Game</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ResetGame\r\n","import { useAppContext } from '../appContext'\r\n\r\nconst RoundCounter = () => {\r\n  const { round, endRound } = useAppContext()\r\n\r\n  return (\r\n    <div>\r\n      <h2>Round {round}</h2>\r\n      <button onClick={endRound}>Next round</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RoundCounter\r\n","import { useEffect, useState } from 'react'\nimport CardsCounter from '../components/CardsCounter'\nimport CardsTable from '../components/CardsTable'\nimport EnergyCounter from '../components/EnergyCounter'\nimport ResetGame from '../components/ResetGame'\nimport RoundCounter from '../components/RoundCounter'\nimport './App.css'\n\nconst launchedAsApp = () =>\n  window.matchMedia('(display-mode: standalone)').matches ||\n  !!window.navigator.standalone\n\nconst App = () => {\n  if (launchedAsApp) {\n    window.resizeTo(540, 1250)\n  }\n\n  const [showInstallButton, setShowInstallButton] = useState(false)\n  const [showOpenInAppButton, setShowOpenInAppButton] = useState(false)\n\n  useEffect(() => {\n    if ('getInstalledRelatedApps' in navigator) {\n      navigator.getInstalledRelatedApps().then((installed) => {\n        console.log({ installed })\n        if (!launchedAsApp) {\n          if (!installed.length) setShowInstallButton(true)\n          else setShowOpenInAppButton(true)\n        }\n      })\n    }\n  }, [])\n\n  return (\n    <div className=\"app\">\n      {showInstallButton && <button>Install</button>}\n      {showOpenInAppButton && <button>Open</button>}\n      <RoundCounter />\n      <EnergyCounter />\n      <hr />\n      <CardsCounter />\n      <CardsTable />\n      <hr />\n      <ResetGame />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './app/App'\nimport { Provider } from './appContext'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorkerRegistration.register()\n"],"sourceRoot":""}